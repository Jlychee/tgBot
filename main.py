from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.types import FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode


from parsing import get_source_html, get_items_urls, get_url
from img_path import get_img

from misc import config

# todo: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(config.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# todo: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_keyboard_start():
    buttons = [
        [types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞', callback_data='season')],
        [types.InlineKeyboardButton(text='–ö–∞–∫–æ–π —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∞–≥–µ–Ω—Ç', callback_data='mood')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_keyboard_stats():
    buttons = [
        [types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞', callback_data='season')],
        [types.InlineKeyboardButton(text='–ö–∞–∫–æ–π —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∞–≥–µ–Ω—Ç', callback_data='mood')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_keyboard_mood():
    buttons = [
        [types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞', callback_data='season')],
        [types.InlineKeyboardButton(text='–≠—Ç–æ –Ω–µ —è, –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑!!', callback_data='mood')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_keyboard_season():
    buttons = [
        [types.InlineKeyboardButton(text='–ó–∞ –≤—Å–µ —Å–µ–∑–æ–Ω—ã', callback_data='stats_all')],
        [types.InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –∑–∞ –Ω—ã–Ω–µ—à–Ω–∏–π —Å–µ–∑–æ–Ω', callback_data='stats')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# todo: –§—É–Ω–∫—Ü–∏–∏
def make_img_path():
    img_info = get_img()
    img_path = FSInputFile(r".\Mood\\" + img_info[0])
    return img_path, img_info[1]


# todo:  –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∞—è –∫–∏–±–µ—Ä–∫–æ—Ç–ª–µ—Ç–∞üòé.'
                              ' –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∫–æ–º-–ª–∏–±–æ –∏–≥—Ä–æ–∫–µ, —Ç–æ —è —Ç–µ–±–µ —Å —ç—Ç–∏–º –ø–æ–º–æ–≥—É!',
                         reply_markup=get_keyboard_start())


@dp.message(Command('mood'))
async def handle_mood(message: types.Message):
    await message.answer_photo(*make_img_path(), reply_markup=get_keyboard_mood())


@dp.message(Command('season'))
async def handle_season(message: types.Message):
    await message.answer('–í–∞–º –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ —Å–µ–∑–æ–Ω—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –Ω—ã–Ω–µ—à–Ω–∏–π?',
                         reply_markup=get_keyboard_season())


@dp.message()
async def get_stats_command(message: types.Message):
    nickname = message.text
    if nickname[0] == '!' and '#' in nickname:
        try:
            msg = ('–ò—Ç–∞–∫, –≤–æ—Ç –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–º —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞. '
                   '–ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ –≤–∞–ª–æ—Ä–∞–Ω—Ç - –∫–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞, –∏ –æ–ø–∏—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ —Å—Ç–æ–∏—Ç!!ü§°\n\n')
            url = get_url(nickname[1:], ss)
            get_source_html(url)
            for key, value in get_items_urls(r'source_page.html').items():
                msg += f'<b>{key}</b>: <em>{value}</em>\n\n'
            await message.answer(text=msg, reply_markup=get_keyboard_stats())
        except AttributeError:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ!')
    else:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')


# todo: –ö–æ–ª–±—ç–∫–∏
@dp.callback_query(F.data == 'season')
async def callback_season(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer('–í–∞–º –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ —Å–µ–∑–æ–Ω—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –Ω—ã–Ω–µ—à–Ω–∏–π?',
                                  reply_markup=get_keyboard_season())


@dp.callback_query(F.data == 'stats')
async def callback_stats(callback: types.CallbackQuery):
    global ss
    ss = ''
    await callback.answer()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å ! –Ω–∞–ø—Ä–∏–º–µ—Ä: !ValenOK#top')


@dp.callback_query(F.data == 'stats_all')
async def callback_stats_all(callback: types.CallbackQuery):
    global ss
    ss = '?season=all'
    await callback.answer()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å ! –Ω–∞–ø—Ä–∏–º–µ—Ä: !ValenOK#top')


@dp.callback_query(F.data == 'mood')
async def callback_mood(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer_photo(*make_img_path(), reply_markup=get_keyboard_mood())


# todo: —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

async def start_bot():
    await dp.start_polling(bot)
